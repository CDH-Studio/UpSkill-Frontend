'use strict';

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _jwtDecode = require('jwt-decode');

var _jwtDecode2 = _interopRequireDefault(_jwtDecode);

var _package = require('../../package.json');

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

var _openBrowser = require('./openBrowser');

var _openBrowser2 = _interopRequireDefault(_openBrowser);

var _accessKeys = require('../accessKeys');

var _getTokens = require('./getTokens');

var _getTokens2 = _interopRequireDefault(_getTokens);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Login
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * - Logs user in via CLI.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * - Loads and updates data in user's .serverlessrc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var login = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(tenant) {
    var configFile, app, server, refreshToken, scope, AUTH0_DOMAIN, auth0Queries, auth0Endpoint, opnRes;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            // Load local configuration file
            configFile = utils.readConfigFile();

            if (configFile) {
              _context3.next = 3;
              break;
            }

            throw new Error(`Serverless Enterprise requires a .serverlessrc file in the project's directory or root directory of this machine.`);

          case 3:

            // Start local server to aide CLI sign-in/up
            app = (0, _express2.default)();

            app.use(_bodyParser2.default.json());
            server = app.listen(8000);
            refreshToken = void 0;
            scope = ['openid', 'email_verified', 'email', 'profile', 'name', 'offline_access'];
            AUTH0_DOMAIN = _config2.default.auth0Domain;
            auth0Queries = _querystring2.default.stringify({
              audience: `https://${AUTH0_DOMAIN}/userinfo`,
              response_type: 'code',
              client_id: _config2.default.auth0ClientId,
              redirect_uri: `${_config2.default.frontendUrl}callback`,
              scope: scope.join(' ')
            });
            auth0Endpoint = `https://${AUTH0_DOMAIN}/authorize?${auth0Queries}`;
            _context3.next = 13;
            return (0, _openBrowser2.default)(auth0Endpoint);

          case 13:
            opnRes = _context3.sent;
            return _context3.abrupt('return', new Promise(function (resolve, reject) {
              app.get('/', function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {
                  var tokens, queriesObj, tokensQueries, endLoginQueries, _tokens;

                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          // eslint-disable-line
                          if (opnRes) {
                            opnRes.kill();
                          }

                          if (!req.query.unverified) {
                            _context.next = 5;
                            break;
                          }

                          res.end();
                          server.close();
                          return _context.abrupt('return', reject('Complete sign-up before logging in.'));

                        case 5:
                          if (!req.query.code) {
                            _context.next = 16;
                            break;
                          }

                          _context.next = 8;
                          return (0, _getTokens2.default)(req.query.code);

                        case 8:
                          tokens = _context.sent;

                          refreshToken = tokens.refresh_token;
                          queriesObj = {
                            idToken: tokens.id_token,
                            accessToken: tokens.access_token,
                            expiresIn: tokens.expires_in,
                            cli: true,
                            cliAuthed: true
                          };
                          tokensQueries = _querystring2.default.stringify(queriesObj);

                          res.redirect(`${_config2.default.frontendUrl}callback?${tokensQueries}`);
                          res.end();
                          _context.next = 23;
                          break;

                        case 16:
                          endLoginQueries = _querystring2.default.stringify({
                            cli: 'true',
                            cliLoginSuccessful: 'true'
                          });

                          res.redirect(`${_config2.default.frontendUrl}?${endLoginQueries}`);
                          res.end();
                          server.close();
                          _tokens = Object.assign({
                            refreshToken
                          }, req.query);

                          _tokens.expiresAt = Number(req.query.expiresAt);
                          return _context.abrupt('return', resolve(_tokens));

                        case 23:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _callee, undefined);
                }));

                return function (_x2, _x3) {
                  return _ref2.apply(this, arguments);
                };
              }());
            }).then(function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(data) {
                var decoded, id, updatedConfigFile, accessKey;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        // Update user's config file (.serverlessrc)
                        decoded = (0, _jwtDecode2.default)(data.idToken);
                        id = decoded.tracking_id || decoded.sub;

                        configFile.userId = id;
                        configFile.users = configFile.users || {};
                        configFile.users[id] = {
                          userId: id,
                          name: decoded.name,
                          email: decoded.email,
                          username: data.username,
                          dashboard: data

                          // Ensure accessKeys object exists
                        };if (!configFile.users[id].dashboard.accessKeys) {
                          configFile.users[id].dashboard.accessKeys = {};
                        }

                        // Add enterprise object
                        configFile.users[id].enterprise = configFile.users[id].enterprise || {};
                        configFile.users[id].enterprise.versionSDK = _package.version;
                        configFile.users[id].enterprise.timeLastLogin = Math.round(+new Date() / 1000);

                        // Write updated data to .serverlessrc
                        updatedConfigFile = utils.writeConfigFile(configFile);

                        // If tenant is included, update config w/ new accesskey for that tenant

                        accessKey = void 0;

                        if (!(tenant && tenant !== 'tenantname')) {
                          _context2.next = 16;
                          break;
                        }

                        _context2.next = 14;
                        return (0, _accessKeys.createAccessKeyForTenant)(tenant);

                      case 14:
                        accessKey = _context2.sent;

                        if (accessKey) {
                          configFile = utils.readConfigFile();
                          configFile.users[id].dashboard.accessKeys[tenant] = accessKey;
                          updatedConfigFile = utils.writeConfigFile(configFile);
                        }

                      case 16:
                        return _context2.abrupt('return', updatedConfigFile);

                      case 17:
                      case 'end':
                        return _context2.stop();
                    }
                  }
                }, _callee2, undefined);
              }));

              return function (_x4) {
                return _ref3.apply(this, arguments);
              };
            }()));

          case 15:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function login(_x) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = login;
//# sourceMappingURL=login.js.map