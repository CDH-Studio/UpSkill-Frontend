{"version":3,"sources":["../../src/login/login.js"],"names":["utils","login","tenant","configFile","readConfigFile","Error","app","use","bodyParser","json","server","listen","refreshToken","scope","AUTH0_DOMAIN","platformConfig","auth0Domain","auth0Queries","querystring","stringify","audience","response_type","client_id","auth0ClientId","redirect_uri","frontendUrl","join","auth0Endpoint","opnRes","Promise","resolve","reject","get","req","res","kill","query","unverified","end","close","code","tokens","refresh_token","queriesObj","idToken","id_token","accessToken","access_token","expiresIn","expires_in","cli","cliAuthed","tokensQueries","redirect","endLoginQueries","cliLoginSuccessful","expiresAt","Number","then","data","decoded","id","tracking_id","sub","userId","users","name","email","username","dashboard","accessKeys","enterprise","versionSDK","currentSdkVersion","timeLastLogin","Math","round","Date","updatedConfigFile","writeConfigFile","accessKey","module","exports"],"mappings":"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","file":"login.js","sourcesContent":["/*\n * Login\n * - Logs user in via CLI.\n * - Loads and updates data in user's .serverlessrc.\n */\n\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport querystring from 'querystring'\nimport jwtDecode from 'jwt-decode'\nimport { version as currentSdkVersion } from '../../package.json'\nimport * as utils from '../utils'\nimport openBrowser from './openBrowser'\nimport { createAccessKeyForTenant } from '../accessKeys'\nimport getTokens from './getTokens'\nimport platformConfig from '../config'\n\nconst login = async (tenant) => {\n  // Load local configuration file\n  let configFile = utils.readConfigFile()\n  if (!configFile) {\n    throw new Error(\n      `Serverless Enterprise requires a .serverlessrc file in the project's directory or root directory of this machine.`\n    )\n  }\n\n  // Start local server to aide CLI sign-in/up\n  const app = express()\n  app.use(bodyParser.json())\n  const server = app.listen(8000)\n  let refreshToken\n\n  const scope = ['openid', 'email_verified', 'email', 'profile', 'name', 'offline_access']\n\n  const AUTH0_DOMAIN = platformConfig.auth0Domain\n\n  const auth0Queries = querystring.stringify({\n    audience: `https://${AUTH0_DOMAIN}/userinfo`,\n    response_type: 'code',\n    client_id: platformConfig.auth0ClientId,\n    redirect_uri: `${platformConfig.frontendUrl}callback`,\n    scope: scope.join(' ')\n  })\n  const auth0Endpoint = `https://${AUTH0_DOMAIN}/authorize?${auth0Queries}`\n\n  const opnRes = await openBrowser(auth0Endpoint)\n\n  // Log in to Serverless Enterprise\n  return new Promise((resolve, reject) => {\n    app.get('/', async (req, res) => {\n      // eslint-disable-line\n      if (opnRes) {\n        opnRes.kill()\n      }\n\n      if (req.query.unverified) {\n        res.end()\n        server.close()\n        return reject('Complete sign-up before logging in.')\n      }\n\n      if (req.query.code) {\n        const tokens = await getTokens(req.query.code)\n        refreshToken = tokens.refresh_token\n        const queriesObj = {\n          idToken: tokens.id_token,\n          accessToken: tokens.access_token,\n          expiresIn: tokens.expires_in,\n          cli: true,\n          cliAuthed: true\n        }\n        const tokensQueries = querystring.stringify(queriesObj)\n        res.redirect(`${platformConfig.frontendUrl}callback?${tokensQueries}`)\n        res.end()\n      } else {\n        const endLoginQueries = querystring.stringify({\n          cli: 'true',\n          cliLoginSuccessful: 'true'\n        })\n        res.redirect(`${platformConfig.frontendUrl}?${endLoginQueries}`)\n        res.end()\n        server.close()\n        const tokens = {\n          refreshToken,\n          ...req.query\n        }\n        tokens.expiresAt = Number(req.query.expiresAt)\n        return resolve(tokens)\n      }\n    })\n  }).then(async (data) => {\n    // Update user's config file (.serverlessrc)\n    const decoded = jwtDecode(data.idToken)\n    const id = decoded.tracking_id || decoded.sub\n    configFile.userId = id\n    configFile.users = configFile.users || {}\n    configFile.users[id] = {\n      userId: id,\n      name: decoded.name,\n      email: decoded.email,\n      username: data.username,\n      dashboard: data\n    }\n\n    // Ensure accessKeys object exists\n    if (!configFile.users[id].dashboard.accessKeys) {\n      configFile.users[id].dashboard.accessKeys = {}\n    }\n\n    // Add enterprise object\n    configFile.users[id].enterprise = configFile.users[id].enterprise || {}\n    configFile.users[id].enterprise.versionSDK = currentSdkVersion\n    configFile.users[id].enterprise.timeLastLogin = Math.round(+new Date() / 1000)\n\n    // Write updated data to .serverlessrc\n    let updatedConfigFile = utils.writeConfigFile(configFile)\n\n    // If tenant is included, update config w/ new accesskey for that tenant\n    let accessKey\n    if (tenant && tenant !== 'tenantname') {\n      accessKey = await createAccessKeyForTenant(tenant)\n      if (accessKey) {\n        configFile = utils.readConfigFile()\n        configFile.users[id].dashboard.accessKeys[tenant] = accessKey\n        updatedConfigFile = utils.writeConfigFile(configFile)\n      }\n    }\n\n    // TODO: Log Stat\n\n    return updatedConfigFile\n  })\n}\n\nmodule.exports = login\n"]}