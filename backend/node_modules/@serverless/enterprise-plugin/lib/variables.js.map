{"version":3,"sources":["../../lib/variables.js"],"names":["_","require","getStateVariable","getAccessKeyForTenant","getDeployProfile","getValueFromDashboardSecrets","ctx","variableString","variableName","substring","indexOf","state","secretsUsed","add","sls","processedInput","commands","accessKey","service","tenant","deploymentProfile","stage","provider","getStage","pick","secrets","fromPairs","secretValues","map","secretName","secretProperties","value","Error","getValueFromDashboardState","split","key","substr","length","outputName","subkey","app","region","getRegion","get","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;iBAKIA,OAAO,CAAC,0BAAD,C;MAHTC,gB,YAAAA,gB;MACAC,qB,YAAAA,qB;MACAC,gB,YAAAA,gB,EAGF;;;AACA,MAAMC,4BAA4B,GAAGC,GAAG;AAAA;AAAA;AAAA,+BAAI,WAAMC,cAAN,EAAwB;AAClE,UAAMC,YAAY,GAAGD,cAAc,CAACE,SAAf,CAAyBF,cAAc,CAACG,OAAf,CAAuB,GAAvB,IAA8B,CAAvD,CAArB;AACAJ,IAAAA,GAAG,CAACK,KAAJ,CAAUC,WAAV,CAAsBC,GAAtB,CAA0BL,YAA1B;;AACA,QACEF,GAAG,CAACQ,GAAJ,CAAQC,cAAR,CAAuBC,QAAvB,CAAgC,CAAhC,MAAuC,OAAvC,IACAV,GAAG,CAACQ,GAAJ,CAAQC,cAAR,CAAuBC,QAAvB,CAAgC,CAAhC,MAAuC,QAFzC,EAGE;AACA,aAAO,EAAP;AACD;;AACD,UAAMC,SAAS,SAASd,qBAAqB,CAACG,GAAG,CAACQ,GAAJ,CAAQI,OAAR,CAAgBC,MAAjB,CAA7C;AACA,UAAMC,iBAAiB,SAAShB,gBAAgB;AAC9Ca,MAAAA,SAD8C;AAE9CI,MAAAA,KAAK,EAAEf,GAAG,CAACgB,QAAJ,CAAaC,QAAb;AAFuC,OAG3CvB,CAAC,CAACwB,IAAF,CAAOlB,GAAG,CAACQ,GAAJ,CAAQI,OAAf,EAAwB,CAAC,QAAD,EAAW,KAAX,EAAkB,SAAlB,CAAxB,CAH2C,EAAhD;;AAKA,UAAMO,OAAO,GAAGzB,CAAC,CAAC0B,SAAF,CACdN,iBAAiB,CAACO,YAAlB,CAA+BC,GAA/B,CAAmC,CAAC;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,gBAAgB,EAAE;AAAEC,QAAAA;AAAF;AAAhC,KAAD,KAAiD,CAClFF,UADkF,EAElFE,KAFkF,CAApF,CADc,CAAhB;;AAMA,QAAI,CAACN,OAAO,CAACjB,YAAD,CAAZ,EAA4B;AAC1B,YAAM,IAAIwB,KAAJ,CAAW,MAAKzB,cAAe,eAA/B,CAAN;AACD;;AACD,WAAOkB,OAAO,CAACjB,YAAD,CAAd;AACD,GAzBuC;;AAAA;AAAA;AAAA;AAAA,GAAxC;;AA2BA,MAAMyB,0BAA0B,GAAG3B,GAAG;AAAA;AAAA;AAAA,gCAAI,WAAMC,cAAN,EAAwB;AAChE,UAAMU,SAAS,SAASd,qBAAqB,CAACG,GAAG,CAACQ,GAAJ,CAAQI,OAAR,CAAgBC,MAAjB,CAA7C;;AACA,QACEb,GAAG,CAACQ,GAAJ,CAAQC,cAAR,CAAuBC,QAAvB,CAAgC,CAAhC,MAAuC,OAAvC,IACAV,GAAG,CAACQ,GAAJ,CAAQC,cAAR,CAAuBC,QAAvB,CAAgC,CAAhC,MAAuC,QAFzC,EAGE;AACA,aAAO,EAAP;AACD;;AACD,UAAME,OAAO,GAAGX,cAAc,CAACE,SAAf,CAAyB,CAAzB,EAA4ByB,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,EAA0C,CAA1C,CAAhB;AACA,UAAMC,GAAG,GAAG5B,cAAc,CAACE,SAAf,CAAyB,CAAzB,EAA4B2B,MAA5B,CAAmClB,OAAO,CAACmB,MAA3C,CAAZ;AACA,UAAMC,UAAU,GAAGH,GAAG,CAACD,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAnB;AACA,UAAMK,MAAM,GAAGJ,GAAG,CAACC,MAAJ,CAAWE,UAAU,CAACD,MAAX,GAAoB,CAA/B,CAAf;;AAXgE,wBAYxCnC,gBAAgB,CAAC;AACvCe,MAAAA,SADuC;AAEvCqB,MAAAA,UAFuC;AAGvCpB,MAAAA,OAHuC;AAIvCsB,MAAAA,GAAG,EAAElC,GAAG,CAACQ,GAAJ,CAAQI,OAAR,CAAgBsB,GAJkB;AAKvCrB,MAAAA,MAAM,EAAEb,GAAG,CAACQ,GAAJ,CAAQI,OAAR,CAAgBC,MALe;AAMvCE,MAAAA,KAAK,EAAEf,GAAG,CAACgB,QAAJ,CAAaC,QAAb,EANgC;AAOvCkB,MAAAA,MAAM,EAAEnC,GAAG,CAACgB,QAAJ,CAAaoB,SAAb;AAP+B,KAAD,CAZwB;AAAA,UAYxDX,KAZwD,SAYxDA,KAZwD;;AAqBhE,QAAIQ,MAAJ,EAAY;AACV,aAAOvC,CAAC,CAAC2C,GAAF,CAAMZ,KAAN,EAAaQ,MAAb,CAAP;AACD;;AACD,WAAOR,KAAP;AACD,GAzBqC;;AAAA;AAAA;AAAA;AAAA,GAAtC;;AA2BAa,MAAM,CAACC,OAAP,GAAiB;AACfxC,EAAAA,4BADe;AAEf4B,EAAAA;AAFe,CAAjB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst {\n  getStateVariable,\n  getAccessKeyForTenant,\n  getDeployProfile,\n} = require('@serverless/platform-sdk');\n\n// functions for new way of getting variables\nconst getValueFromDashboardSecrets = ctx => async variableString => {\n  const variableName = variableString.substring(variableString.indexOf(':') + 1);\n  ctx.state.secretsUsed.add(variableName);\n  if (\n    ctx.sls.processedInput.commands[0] === 'login' ||\n    ctx.sls.processedInput.commands[0] === 'logout'\n  ) {\n    return {};\n  }\n  const accessKey = await getAccessKeyForTenant(ctx.sls.service.tenant);\n  const deploymentProfile = await getDeployProfile({\n    accessKey,\n    stage: ctx.provider.getStage(),\n    ..._.pick(ctx.sls.service, ['tenant', 'app', 'service']),\n  });\n  const secrets = _.fromPairs(\n    deploymentProfile.secretValues.map(({ secretName, secretProperties: { value } }) => [\n      secretName,\n      value,\n    ])\n  );\n  if (!secrets[variableName]) {\n    throw new Error(`$\\{${variableString}} not defined`);\n  }\n  return secrets[variableName];\n};\n\nconst getValueFromDashboardState = ctx => async variableString => {\n  const accessKey = await getAccessKeyForTenant(ctx.sls.service.tenant);\n  if (\n    ctx.sls.processedInput.commands[0] === 'login' ||\n    ctx.sls.processedInput.commands[0] === 'logout'\n  ) {\n    return {};\n  }\n  const service = variableString.substring(6).split('.', 1)[0];\n  const key = variableString.substring(6).substr(service.length);\n  const outputName = key.split('.')[1];\n  const subkey = key.substr(outputName.length + 2);\n  const { value } = await getStateVariable({\n    accessKey,\n    outputName,\n    service,\n    app: ctx.sls.service.app,\n    tenant: ctx.sls.service.tenant,\n    stage: ctx.provider.getStage(),\n    region: ctx.provider.getRegion(),\n  });\n  if (subkey) {\n    return _.get(value, subkey);\n  }\n  return value;\n};\n\nmodule.exports = {\n  getValueFromDashboardSecrets,\n  getValueFromDashboardState,\n};\n"],"file":"variables.js"}