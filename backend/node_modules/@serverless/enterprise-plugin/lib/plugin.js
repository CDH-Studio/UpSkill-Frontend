'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const chalk = require('chalk');

const _require = require('@serverless/platform-sdk'),
      configureFetchDefaults = _require.configureFetchDefaults,
      getLoggedInUser = _require.getLoggedInUser,
      openBrowser = _require.openBrowser;

const errorHandler = require('./errorHandler');

const logsCollection = require('./logsCollection');

const login = require('./login');

const logout = require('./logout');

const wrap = require('./wrap');

const injectLogsIamRole = require('./injectLogsIamRole');

const injectOutputOutputs = require('./injectOutputOutputs');

const wrapClean = require('./wrapClean');

const runPolicies = require('./safeguards');

const getCredentials = require('./credentials');

const getAppUids = require('./appUids');

const removeDestination = require('./removeDestination');

const _require2 = require('./deployment'),
      saveDeployment = _require2.saveDeployment,
      createAndSetDeploymentUid = _require2.createAndSetDeploymentUid;

const variables = require('./variables');

const _require3 = require('./generateEvent'),
      generate = _require3.generate,
      eventDict = _require3.eventDict;

const _require4 = require('./deployProfile'),
      configureDeployProfile = _require4.configureDeployProfile;

const _require5 = require('./test'),
      test = _require5.test;

const _require6 = require('./dashboard'),
      getDashboardUrl = _require6.getDashboardUrl;

const setApiGatewayAccessLogFormat = require('./setApiGatewayAccessLogFormat');

const interactiveCli = require('./interactiveCli');
/*
 * Serverless Enterprise Plugin
 */


class ServerlessEnterprisePlugin {
  constructor(sls) {
    this.sls = sls; // Defaults

    this.state = {}; // Useful for storing data across hooks

    this.state.secretsUsed = new Set(); // forward compatibility with org

    sls.service.tenant = sls.service.org || sls.service.tenant;
    configureFetchDefaults();
    const user = getLoggedInUser();
    const currentCommand = sls.processedInput.commands[0]; // Configure commands available to logged out users

    this.commands = {
      'login': {
        usage: 'Login or sign up for Serverless',
        lifecycleEvents: ['login'],
        enterprise: true
      },
      'logout': {
        usage: 'Logout from Serverless',
        lifecycleEvents: ['logout'],
        enterprise: true
      },
      'generate-event': {
        usage: 'Generate event',
        lifecycleEvents: ['generate-event'],
        options: {
          type: {
            usage: `Specify event type. ${Object.keys(eventDict).join(', ')} are supported.`,
            shortcut: 't',
            required: true
          },
          body: {
            usage: 'Specify the body for the message, request, or stream event.',
            shortcut: 'b'
          }
        },
        enterprise: true
      },
      'test': {
        usage: 'Run HTTP tests',
        lifecycleEvents: ['test'],
        options: {
          function: {
            usage: 'Specify the function to test',
            shortcut: 'f'
          },
          test: {
            usage: 'Specify a specific test to run',
            shortcut: 't'
          }
        },
        enterprise: true
      },
      'dashboard': {
        usage: 'Open the Serverless dashboard',
        lifecycleEvents: ['dashboard'],
        enterprise: true
      }
    };
    this.hooks = {
      'login:login': this.route('login:login').bind(this),
      'logout:logout': this.route('logout:logout').bind(this),
      'generate-event:generate-event': this.route('generate-event:generate-event').bind(this),
      'test:test': this.route('test:test').bind(this),
      'dashboard:dashboard': this.route('dashboard:dashboard').bind(this)
    };
    this.variableResolvers = {
      param: {
        resolver: variables.getValueFromDashboardSecrets(this),
        serviceName: 'Serverless Parameters',
        isDisabledAtPrepopulation: true
      },
      secrets: {
        resolver: variables.getValueFromDashboardSecrets(this),
        serviceName: 'Serverless Secrets',
        isDisabledAtPrepopulation: true
      },
      state: {
        resolver: variables.getValueFromDashboardState(this),
        serviceName: 'Serverless Outputs',
        isDisabledAtPrepopulation: true
      }
    }; // Don't check any dashbaord stuff if using an unauthenticated command

    if (['login', 'logout', 'generate-event'].includes(currentCommand)) {
      return;
    }

    const interactiveCliHooks = interactiveCli(this);

    if (interactiveCliHooks) {
      this.hooks = interactiveCliHooks;
    } // Check if dashboard is configured


    const missing = [];

    if (!sls.service.tenant) {
      missing.push('tenant');
    }

    if (!sls.service.app) {
      missing.push('app');
    }

    if (!sls.service.service) {
      missing.push('service');
    }

    if (missing.length > 0) {
      // user isn't configured to use SFE
      Object.assign(this.hooks, {
        'after:aws:deploy:finalize:cleanup': () => sls.cli.log('Run the "serverless" command to setup monitoring, troubleshooting and testing.')
      });
    } else {
      this.provider = this.sls.getProvider('aws');
      sls.enterpriseEnabled = true;

      if (sls.service.app.match(new RegExp(sls.service.provider.variableSyntax)) || sls.service.tenant.match(new RegExp(sls.service.provider.variableSyntax))) {
        throw new Error('"app" and "org" in your serverless config can not use the variable system');
      }

      if (interactiveCliHooks) {
        // don't need any additional hooks if runing `sls` w no args and dont want to check that
        // user is valid, we ignore any errors fetching the deploy profile.
        return;
      } // throw an error if there is no user or access key and not dashboard command


      if (!user && !process.env.SERVERLESS_ACCESS_KEY && currentCommand !== 'dashboard') {
        const errorMessage = process.env.CI ? 'You are not currently logged in. Follow instructions in http://slss.io/run-in-cicd to setup env vars for authentication.' : 'You are not currently logged in. To log in, use: $ serverless login';
        console.log(''); // eslint-disable-line no-console

        sls.cli.log(errorMessage);
        throw new Error(errorMessage);
      } // Set Plugin hooks for authenticated Enteprise Plugin features here


      Object.assign(this.hooks, {
        'before:package:createDeploymentArtifacts': this.route('before:package:createDeploymentArtifacts').bind(this),
        'after:package:createDeploymentArtifacts': this.route('after:package:createDeploymentArtifacts').bind(this),
        'before:deploy:function:packageFunction': this.route('before:deploy:function:packageFunction').bind(this),
        'after:deploy:function:packageFunction': this.route('after:deploy:function:packageFunction').bind(this),
        'before:invoke:local:invoke': this.route('before:invoke:local:invoke').bind(this),
        'before:aws:package:finalize:saveServiceState': this.route('before:aws:package:finalize:saveServiceState').bind(this),
        'before:deploy:deploy': this.route('before:deploy:deploy').bind(this),
        'before:aws:deploy:deploy:createStack': this.route('before:aws:deploy:deploy:createStack').bind(this),
        'after:aws:deploy:finalize:cleanup': this.route('after:aws:deploy:finalize:cleanup').bind(this),
        'after:deploy:finalize': this.route('after:deploy:finalize').bind(this),
        'after:deploy:deploy': this.route('after:deploy:deploy').bind(this),
        'before:info:info': this.route('before:info:info').bind(this),
        'after:info:info': this.route('after:info:info').bind(this),
        'before:logs:logs': this.route('before:logs:logs').bind(this),
        'before:metrics:metrics': this.route('before:metrics:metrics').bind(this),
        'before:remove:remove': this.route('before:remove:remove').bind(this),
        'after:remove:remove': this.route('after:remove:remove').bind(this),
        'after:invoke:local:invoke': this.route('after:invoke:local:invoke').bind(this),
        'before:offline:start:init': this.route('before:offline:start:init').bind(this),
        'before:step-functions-offline:start': this.route('before:step-functions-offline:start').bind(this)
      });
    }
  }
  /*
   * Route
   */


  route(hook) {
    var _this = this;

    const self = this;
    return (
      /*#__PURE__*/
      _asyncToGenerator(function* () {
        switch (hook) {
          case 'before:package:createDeploymentArtifacts':
            Object.assign(self.sls.service, (yield getAppUids(self.sls.service.tenant, self.sls.service.app)));
            createAndSetDeploymentUid(self);
            yield wrap(self);
            yield injectLogsIamRole(self);
            yield injectOutputOutputs(self);
            yield setApiGatewayAccessLogFormat(self);
            break;

          case 'after:package:createDeploymentArtifacts':
            yield wrapClean(self);
            break;

          case 'before:deploy:function:packageFunction':
            createAndSetDeploymentUid(self);
            yield wrap(self);
            break;

          case 'after:deploy:function:packageFunction':
            yield wrapClean(self);
            break;

          case 'before:aws:package:finalize:saveServiceState':
            yield getCredentials(self);
            yield logsCollection(self);
            break;

          case 'before:deploy:deploy':
            _this.enterprise = {
              errorHandler: errorHandler(_this) // V.1 calls this when it crashes

            };
            yield runPolicies(self);
            break;

          case 'before:aws:deploy:deploy:createStack':
            break;

          case 'after:aws:deploy:finalize:cleanup':
            yield saveDeployment(self);
            break;

          case 'before:info:info':
            yield getCredentials(self);
            break;

          case 'after:info:info':
            // eslint-disable-next-line no-console
            console.log(chalk.yellow(`Run "serverless dashboard" to open the dashboard or visit ${getDashboardUrl(self)}`));
            break;

          case 'dashboard:dashboard':
            openBrowser(getDashboardUrl(self));
            break;

          case 'before:logs:logs':
            yield getCredentials(self);
            break;

          case 'before:metrics:metrics':
            yield getCredentials(self);
            break;

          case 'before:remove:remove':
            yield getCredentials(self);
            break;

          case 'after:remove:remove':
            Object.assign(self.sls.service, (yield getAppUids(self.sls.service.tenant, self.sls.service.app)));
            yield removeDestination(self);
            yield saveDeployment(self, true);
            break;

          case 'before:invoke:local:invoke':
            Object.assign(self.sls.service, {
              appUid: '000000000000000000',
              tenantUid: '000000000000000000'
            });
            yield wrap(self);
            break;

          case 'after:invoke:local:invoke':
            yield wrapClean(self);
            break;

          case 'before:offline:start:init':
            // await wrap(self)
            break;

          case 'before:step-functions-offline:start':
            // await wrap(self)
            break;

          case 'login:login':
            yield login(self);
            break;

          case 'logout:logout':
            yield logout(self);
            break;

          case 'generate-event:generate-event':
            yield generate(self);
            break;

          case 'test:test':
            yield test(self);
            break;

          default:
        }
      })
    );
  }

  asyncInit() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      if (_this2.sls.enterpriseEnabled) yield configureDeployProfile(_this2);
    })();
  }

}

module.exports = ServerlessEnterprisePlugin;
//# sourceMappingURL=plugin.js.map