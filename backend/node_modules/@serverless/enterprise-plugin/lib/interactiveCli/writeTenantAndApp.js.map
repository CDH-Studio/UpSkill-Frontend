{"version":3,"sources":["../../../lib/interactiveCli/writeTenantAndApp.js"],"names":["require","readFile","writeFile","getServerlessFilePath","module","exports","serverless","tenantName","appName","serverlessFileName","processedInput","options","config","servicePath","ymlString","error","code","process","stdout","write","toString","match","replace","service","tenant","app"],"mappings":"AAAA;;;;;;iBAEgCA,OAAO,CAAC,UAAD,C;MAA/BC,Q,YAAAA,Q;MAAUC,S,YAAAA,S;;AAClB,MAAMC,qBAAqB,GAAGH,OAAO,CAAC,qCAAD,CAArC;;AAEAI,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA,+BAAiB,WAAOC,UAAP,EAAmBC,UAAnB,EAA+BC,OAA/B,EAA2C;AAC1D,UAAMC,kBAAkB,SAASN,qBAAqB,CACpDG,UAAU,CAACI,cAAX,CAA0BC,OAA1B,CAAkCC,MADkB,EAEpDN,UAAU,CAACM,MAAX,CAAkBC,WAFkC,CAAtD;AAKA,QAAIC,SAAS,SAAS,kBAAC,aAAY;AACjC,UAAI;AACF,qBAAab,QAAQ,CAACQ,kBAAD,CAArB;AACD,OAFD,CAEE,OAAOM,KAAP,EAAc;AACd,YAAIA,KAAK,CAACC,IAAN,KAAe,QAAnB,EAA6B,OAAO,IAAP;AAC7B,cAAMD,KAAN;AACD;AACF,KAPqB,GAAtB;;AASA,QAAI,CAACD,SAAL,EAAgB;AACdG,MAAAA,OAAO,CAACC,MAAR,CAAeC,KAAf,CACE,0EACG,QAAOZ,UAAW,UAASC,OAAQ,IAFxC;AAID;;AACDM,IAAAA,SAAS,GAAGA,SAAS,CAACM,QAAV,EAAZ;;AACA,QAAIN,SAAS,CAACO,KAAV,CAAgB,wBAAhB,CAAJ,EAA+C;AAC7CP,MAAAA,SAAS,GAAGA,SAAS,CAACQ,OAAV,CAAkB,wBAAlB,EAA6C,QAAOd,OAAQ,EAA5D,CAAZ;AACD,KAFD,MAEO;AACLM,MAAAA,SAAS,GAAI,QAAON,OAAQ,KAAIM,SAAU,EAA1C;AACD;;AACD,QAAIA,SAAS,CAACO,KAAV,CAAgB,wBAAhB,CAAJ,EAA+C;AAC7CP,MAAAA,SAAS,GAAGA,SAAS,CAACQ,OAAV,CAAkB,wBAAlB,EAA6C,QAAOf,UAAW,EAA/D,CAAZ;AACD,KAFD,MAEO,IAAIO,SAAS,CAACO,KAAV,CAAgB,2BAAhB,CAAJ,EAAkD;AACvDP,MAAAA,SAAS,GAAGA,SAAS,CAACQ,OAAV,CAAkB,2BAAlB,EAAgD,QAAOf,UAAW,EAAlE,CAAZ;AACD,KAFM,MAEA;AACLO,MAAAA,SAAS,GAAI,QAAOP,UAAW,KAAIO,SAAU,EAA7C;AACD;;AACD,UAAMZ,SAAS,CAACO,kBAAD,EAAqBK,SAArB,CAAf;AACAR,IAAAA,UAAU,CAACiB,OAAX,CAAmBC,MAAnB,GAA4BjB,UAA5B;AACAD,IAAAA,UAAU,CAACiB,OAAX,CAAmBE,GAAnB,GAAyBjB,OAAzB;AACD,GArCD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict';\n\nconst { readFile, writeFile } = require('fs-extra');\nconst getServerlessFilePath = require('../deployment/getServerlessFilePath');\n\nmodule.exports = async (serverless, tenantName, appName) => {\n  const serverlessFileName = await getServerlessFilePath(\n    serverless.processedInput.options.config,\n    serverless.config.servicePath\n  );\n\n  let ymlString = await (async () => {\n    try {\n      return await readFile(serverlessFileName);\n    } catch (error) {\n      if (error.code === 'ENOENT') return null;\n      throw error;\n    }\n  })();\n\n  if (!ymlString) {\n    process.stdout.write(\n      'Add the following settings to your serverless configuration file:\\n\\n' +\n        `org: ${tenantName}\\napp: ${appName}\\n`\n    );\n  }\n  ymlString = ymlString.toString();\n  if (ymlString.match(/^\\s*#\\s*app\\s*:\\s+.*$/m)) {\n    ymlString = ymlString.replace(/^\\s*#\\s*app\\s*:\\s+.*$/m, `app: ${appName}`);\n  } else {\n    ymlString = `app: ${appName}\\n${ymlString}`;\n  }\n  if (ymlString.match(/^\\s*#\\s*org\\s*:\\s+.*$/m)) {\n    ymlString = ymlString.replace(/^\\s*#\\s*org\\s*:\\s+.*$/m, `org: ${tenantName}`);\n  } else if (ymlString.match(/^\\s*#\\s*tenant\\s*:\\s+.*$/m)) {\n    ymlString = ymlString.replace(/^\\s*#\\s*tenant\\s*:\\s+.*$/m, `org: ${tenantName}`);\n  } else {\n    ymlString = `org: ${tenantName}\\n${ymlString}`;\n  }\n  await writeFile(serverlessFileName, ymlString);\n  serverless.service.tenant = tenantName;\n  serverless.service.app = appName;\n};\n"],"file":"writeTenantAndApp.js"}