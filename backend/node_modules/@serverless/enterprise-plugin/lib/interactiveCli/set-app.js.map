{"version":3,"sources":["../../../lib/interactiveCli/set-app.js"],"names":["_","require","createApp","createAccessKeyForTenant","createDeployProfile","getApps","getDeployProfiles","getLoggedInUser","listTenants","refreshToken","setDefaultDeploymentProfile","writeConfigFile","enableConfirm","writeTenantAndApp","isValidAppName","RegExp","prototype","test","bind","tenantsChoice","inquirer","tenantNames","prompt","message","type","name","choices","Array","from","tenantName","deployProfileChoice","deployProfiles","deploymentProfile","appNameChoice","appNames","concat","value","appName","appNameInput","validate","input","trim","includes","module","exports","check","serverless","config","servicePath","service","provider","tenant","app","user","tenants","Set","idToken","Object","keys","accessKeys","add","username","map","size","run","interactiveCli","values","next","has","token","users","userId","dashboard","apps","length","newAppName","accessKey","deploymentProfileUid","find"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst {\n  createApp,\n  createAccessKeyForTenant,\n  createDeployProfile,\n  getApps,\n  getDeployProfiles,\n  getLoggedInUser,\n  listTenants,\n  refreshToken,\n  setDefaultDeploymentProfile,\n  writeConfigFile,\n} = require('@serverless/platform-sdk');\nconst enableConfirm = require('./enableConfirm');\nconst writeTenantAndApp = require('./writeTenantAndApp');\n\nconst isValidAppName = RegExp.prototype.test.bind(/^[a-z0-9](?:[a-z0-9-]{0,126}[a-z0-9])?$/);\n\nconst tenantsChoice = async (inquirer, tenantNames) =>\n  (await inquirer.prompt({\n    message: 'What org do you want to add this to?',\n    type: 'list',\n    name: 'tenantName',\n    choices: Array.from(tenantNames),\n  })).tenantName;\n\nconst deployProfileChoice = async (inquirer, deployProfiles) =>\n  (await inquirer.prompt({\n    message: 'What deployment profile do you want to use?',\n    type: 'list',\n    name: 'deploymentProfile',\n    choices: Array.from(deployProfiles),\n  })).deploymentProfile;\n\nconst appNameChoice = async (inquirer, appNames) =>\n  (await inquirer.prompt({\n    message: 'What application do you want to add this to?',\n    type: 'list',\n    name: 'appName',\n    choices: Array.from(appNames).concat({ name: '[create a new app]', value: '_create_' }),\n  })).appName;\n\nconst appNameInput = async (inquirer, appNames) =>\n  (await inquirer.prompt({\n    message: 'What do you want to name this application?',\n    type: 'input',\n    name: 'appName',\n    validate: input => {\n      input = input.trim();\n      if (!isValidAppName(input)) {\n        return (\n          'App name is not valid.\\n' +\n          '   - It should only contain lowercase alphanumeric and hyphens.\\n' +\n          '   - It should start and end with an alphanumeric character.\\n' +\n          \"   - Shouldn't exceed 128 characters\"\n        );\n      }\n      if (appNames.includes(input)) return 'App of this name already exists';\n      return true;\n    },\n  })).appName.trim();\n\nmodule.exports = {\n  async check(serverless) {\n    if (!serverless.config.servicePath) return false;\n    if (serverless.service.provider.name !== 'aws') return false;\n    if (serverless.service.tenant && serverless.service.app) return false;\n    let user = getLoggedInUser();\n    let tenants = new Set();\n    if (!user) {\n      return false;\n    } else if (!user.idToken) {\n      for (const tenant of Object.keys(user.accessKeys)) {\n        tenants.add(tenant);\n      }\n    } else {\n      await refreshToken();\n      user = getLoggedInUser();\n      tenants = new Set(\n        (await listTenants({ username: user.username, idToken: user.idToken })).map(\n          tenant => tenant.tenantName\n        )\n      );\n    }\n    if (!tenants.size) return false;\n    return { user, tenants };\n  },\n  async run(serverless, { user, tenants }) {\n    const { inquirer } = serverless.interactiveCli;\n    if (!serverless.service.tenant) {\n      if (!(await enableConfirm(inquirer))) return null;\n    }\n\n    const tenantName = await (async () => {\n      if (tenants.size === 1) return tenants.values().next().value;\n      if (serverless.service.tenant && tenants.has(serverless.service.tenant)) {\n        return serverless.service.tenant;\n      }\n      return tenantsChoice(inquirer, tenants);\n    })();\n\n    let token;\n    if (user.accessKeys && user.accessKeys[tenantName]) {\n      token = user.accessKeys[tenantName];\n    } else {\n      token = await createAccessKeyForTenant(tenantName);\n      await writeConfigFile({\n        users: { [user.userId]: { dashboard: { accessKeys: { [tenantName]: token } } } },\n      });\n    }\n    const apps = await getApps({ tenant: tenantName, token });\n\n    let appName;\n    const appNames = apps.map(app => app.appName);\n    if (serverless.service.app && appNames.includes(serverless.service.app)) {\n      appName = serverless.service.app;\n    } else {\n      appName = apps.length ? await appNameChoice(inquirer, appNames) : '_create_';\n    }\n    if (appName === '_create_') {\n      const newAppName = await appNameInput(inquirer, appNames);\n      ({ appName } = await createApp({ tenant: tenantName, app: newAppName, token }));\n\n      let deployProfiles = await getDeployProfiles({ tenant: tenantName, accessKey: token });\n      let deploymentProfile;\n      if (deployProfiles.length === 0) {\n        await createDeployProfile({ name: 'default', tenant: tenantName, accessKey: token });\n        deployProfiles = await getDeployProfiles({ tenant: tenantName });\n      }\n      if (deployProfiles.length === 1) {\n        deploymentProfile = deployProfiles[0].deploymentProfileUid;\n      } else {\n        deploymentProfile = await deployProfileChoice(\n          inquirer,\n          deployProfiles.map(({ name }) => name)\n        );\n        deploymentProfile = _.find(deployProfiles, ({ name }) => name === deploymentProfile)\n          .deploymentProfileUid;\n      }\n      await setDefaultDeploymentProfile({\n        accessKey: token,\n        app: appName,\n        tenant: tenantName,\n        deploymentProfile,\n      });\n    }\n    return writeTenantAndApp(serverless, tenantName, appName);\n  },\n};\n"],"file":"set-app.js"}