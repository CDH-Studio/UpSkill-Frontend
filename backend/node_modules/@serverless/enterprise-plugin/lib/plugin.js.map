{"version":3,"sources":["../../lib/plugin.js"],"names":["chalk","require","configureFetchDefaults","getLoggedInUser","openBrowser","errorHandler","logsCollection","login","logout","wrap","injectLogsIamRole","injectOutputOutputs","wrapClean","runPolicies","getCredentials","getAppUids","removeDestination","saveDeployment","createAndSetDeploymentUid","variables","generate","eventDict","configureDeployProfile","test","getDashboardUrl","setApiGatewayAccessLogFormat","interactiveCli","ServerlessEnterprisePlugin","constructor","sls","state","secretsUsed","Set","service","tenant","org","user","currentCommand","processedInput","commands","usage","lifecycleEvents","enterprise","options","type","Object","keys","join","shortcut","required","body","function","hooks","route","bind","variableResolvers","param","resolver","getValueFromDashboardSecrets","serviceName","isDisabledAtPrepopulation","secrets","getValueFromDashboardState","includes","interactiveCliHooks","missing","push","app","length","assign","cli","log","provider","getProvider","enterpriseEnabled","match","RegExp","variableSyntax","Error","process","env","SERVERLESS_ACCESS_KEY","errorMessage","CI","console","hook","self","yellow","appUid","tenantUid","asyncInit","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst chalk = require('chalk');\nconst {\n  configureFetchDefaults,\n  getLoggedInUser,\n  openBrowser,\n} = require('@serverless/platform-sdk');\nconst errorHandler = require('./errorHandler');\nconst logsCollection = require('./logsCollection');\nconst login = require('./login');\nconst logout = require('./logout');\nconst wrap = require('./wrap');\nconst injectLogsIamRole = require('./injectLogsIamRole');\nconst injectOutputOutputs = require('./injectOutputOutputs');\nconst wrapClean = require('./wrapClean');\nconst runPolicies = require('./safeguards');\nconst getCredentials = require('./credentials');\nconst getAppUids = require('./appUids');\nconst removeDestination = require('./removeDestination');\nconst { saveDeployment, createAndSetDeploymentUid } = require('./deployment');\nconst variables = require('./variables');\nconst { generate, eventDict } = require('./generateEvent');\nconst { configureDeployProfile } = require('./deployProfile');\nconst { test } = require('./test');\nconst { getDashboardUrl } = require('./dashboard');\nconst setApiGatewayAccessLogFormat = require('./setApiGatewayAccessLogFormat');\nconst interactiveCli = require('./interactiveCli');\n\n/*\n * Serverless Enterprise Plugin\n */\n\nclass ServerlessEnterprisePlugin {\n  constructor(sls) {\n    this.sls = sls;\n\n    // Defaults\n    this.state = {}; // Useful for storing data across hooks\n    this.state.secretsUsed = new Set();\n\n    // forward compatibility with org\n    sls.service.tenant = sls.service.org || sls.service.tenant;\n\n    configureFetchDefaults();\n    const user = getLoggedInUser();\n    const currentCommand = sls.processedInput.commands[0];\n\n    // Configure commands available to logged out users\n    this.commands = {\n      'login': {\n        usage: 'Login or sign up for Serverless',\n        lifecycleEvents: ['login'],\n        enterprise: true,\n      },\n      'logout': {\n        usage: 'Logout from Serverless',\n        lifecycleEvents: ['logout'],\n        enterprise: true,\n      },\n      'generate-event': {\n        usage: 'Generate event',\n        lifecycleEvents: ['generate-event'],\n        options: {\n          type: {\n            usage: `Specify event type. ${Object.keys(eventDict).join(', ')} are supported.`,\n            shortcut: 't',\n            required: true,\n          },\n          body: {\n            usage: 'Specify the body for the message, request, or stream event.',\n            shortcut: 'b',\n          },\n        },\n        enterprise: true,\n      },\n      'test': {\n        usage: 'Run HTTP tests',\n        lifecycleEvents: ['test'],\n        options: {\n          function: {\n            usage: 'Specify the function to test',\n            shortcut: 'f',\n          },\n          test: {\n            usage: 'Specify a specific test to run',\n            shortcut: 't',\n          },\n        },\n        enterprise: true,\n      },\n      'dashboard': {\n        usage: 'Open the Serverless dashboard',\n        lifecycleEvents: ['dashboard'],\n        enterprise: true,\n      },\n    };\n    this.hooks = {\n      'login:login': this.route('login:login').bind(this),\n      'logout:logout': this.route('logout:logout').bind(this),\n      'generate-event:generate-event': this.route('generate-event:generate-event').bind(this),\n      'test:test': this.route('test:test').bind(this),\n      'dashboard:dashboard': this.route('dashboard:dashboard').bind(this),\n    };\n    this.variableResolvers = {\n      param: {\n        resolver: variables.getValueFromDashboardSecrets(this),\n        serviceName: 'Serverless Parameters',\n        isDisabledAtPrepopulation: true,\n      },\n      secrets: {\n        resolver: variables.getValueFromDashboardSecrets(this),\n        serviceName: 'Serverless Secrets',\n        isDisabledAtPrepopulation: true,\n      },\n      state: {\n        resolver: variables.getValueFromDashboardState(this),\n        serviceName: 'Serverless Outputs',\n        isDisabledAtPrepopulation: true,\n      },\n    };\n\n    // Don't check any dashbaord stuff if using an unauthenticated command\n    if (['login', 'logout', 'generate-event'].includes(currentCommand)) {\n      return;\n    }\n    const interactiveCliHooks = interactiveCli(this);\n    if (interactiveCliHooks) {\n      this.hooks = interactiveCliHooks;\n    }\n\n    // Check if dashboard is configured\n    const missing = [];\n    if (!sls.service.tenant) {\n      missing.push('tenant');\n    }\n    if (!sls.service.app) {\n      missing.push('app');\n    }\n    if (!sls.service.service) {\n      missing.push('service');\n    }\n    if (missing.length > 0) {\n      // user isn't configured to use SFE\n      Object.assign(this.hooks, {\n        'after:aws:deploy:finalize:cleanup': () =>\n          sls.cli.log(\n            'Run the \"serverless\" command to setup monitoring, troubleshooting and testing.'\n          ),\n      });\n    } else {\n      this.provider = this.sls.getProvider('aws');\n      sls.enterpriseEnabled = true;\n\n      if (\n        sls.service.app.match(new RegExp(sls.service.provider.variableSyntax)) ||\n        sls.service.tenant.match(new RegExp(sls.service.provider.variableSyntax))\n      ) {\n        throw new Error(\n          '\"app\" and \"org\" in your serverless config can not use the variable system'\n        );\n      }\n\n      if (interactiveCliHooks) {\n        // don't need any additional hooks if runing `sls` w no args and dont want to check that\n        // user is valid, we ignore any errors fetching the deploy profile.\n        return;\n      }\n\n      // throw an error if there is no user or access key and not dashboard command\n      if (!user && !process.env.SERVERLESS_ACCESS_KEY && currentCommand !== 'dashboard') {\n        const errorMessage = process.env.CI\n          ? 'You are not currently logged in. Follow instructions in http://slss.io/run-in-cicd to setup env vars for authentication.'\n          : 'You are not currently logged in. To log in, use: $ serverless login';\n        console.log(''); // eslint-disable-line no-console\n        sls.cli.log(errorMessage);\n        throw new Error(errorMessage);\n      }\n\n      // Set Plugin hooks for authenticated Enteprise Plugin features here\n      Object.assign(this.hooks, {\n        'before:package:createDeploymentArtifacts': this.route(\n          'before:package:createDeploymentArtifacts'\n        ).bind(this),\n        'after:package:createDeploymentArtifacts': this.route(\n          'after:package:createDeploymentArtifacts'\n        ).bind(this),\n        'before:deploy:function:packageFunction': this.route(\n          'before:deploy:function:packageFunction'\n        ).bind(this),\n        'after:deploy:function:packageFunction': this.route(\n          'after:deploy:function:packageFunction'\n        ).bind(this),\n        'before:invoke:local:invoke': this.route('before:invoke:local:invoke').bind(this),\n        'before:aws:package:finalize:saveServiceState': this.route(\n          'before:aws:package:finalize:saveServiceState'\n        ).bind(this),\n        'before:deploy:deploy': this.route('before:deploy:deploy').bind(this),\n        'before:aws:deploy:deploy:createStack': this.route(\n          'before:aws:deploy:deploy:createStack'\n        ).bind(this),\n        'after:aws:deploy:finalize:cleanup': this.route('after:aws:deploy:finalize:cleanup').bind(\n          this\n        ),\n        'after:deploy:finalize': this.route('after:deploy:finalize').bind(this),\n        'after:deploy:deploy': this.route('after:deploy:deploy').bind(this),\n        'before:info:info': this.route('before:info:info').bind(this),\n        'after:info:info': this.route('after:info:info').bind(this),\n        'before:logs:logs': this.route('before:logs:logs').bind(this),\n        'before:metrics:metrics': this.route('before:metrics:metrics').bind(this),\n        'before:remove:remove': this.route('before:remove:remove').bind(this),\n        'after:remove:remove': this.route('after:remove:remove').bind(this),\n        'after:invoke:local:invoke': this.route('after:invoke:local:invoke').bind(this),\n        'before:offline:start:init': this.route('before:offline:start:init').bind(this),\n        'before:step-functions-offline:start': this.route(\n          'before:step-functions-offline:start'\n        ).bind(this),\n      });\n    }\n  }\n\n  /*\n   * Route\n   */\n\n  route(hook) {\n    const self = this;\n    return async () => {\n      switch (hook) {\n        case 'before:package:createDeploymentArtifacts':\n          Object.assign(\n            self.sls.service,\n            await getAppUids(self.sls.service.tenant, self.sls.service.app)\n          );\n          createAndSetDeploymentUid(self);\n          await wrap(self);\n          await injectLogsIamRole(self);\n          await injectOutputOutputs(self);\n          await setApiGatewayAccessLogFormat(self);\n          break;\n        case 'after:package:createDeploymentArtifacts':\n          await wrapClean(self);\n          break;\n        case 'before:deploy:function:packageFunction':\n          createAndSetDeploymentUid(self);\n          await wrap(self);\n          break;\n        case 'after:deploy:function:packageFunction':\n          await wrapClean(self);\n          break;\n        case 'before:aws:package:finalize:saveServiceState':\n          await getCredentials(self);\n          await logsCollection(self);\n          break;\n        case 'before:deploy:deploy':\n          this.enterprise = {\n            errorHandler: errorHandler(this), // V.1 calls this when it crashes\n          };\n          await runPolicies(self);\n          break;\n        case 'before:aws:deploy:deploy:createStack':\n          break;\n        case 'after:aws:deploy:finalize:cleanup':\n          await saveDeployment(self);\n          break;\n        case 'before:info:info':\n          await getCredentials(self);\n          break;\n        case 'after:info:info':\n          // eslint-disable-next-line no-console\n          console.log(\n            chalk.yellow(\n              `Run \"serverless dashboard\" to open the dashboard or visit ${getDashboardUrl(self)}`\n            )\n          );\n          break;\n        case 'dashboard:dashboard':\n          openBrowser(getDashboardUrl(self));\n          break;\n        case 'before:logs:logs':\n          await getCredentials(self);\n          break;\n        case 'before:metrics:metrics':\n          await getCredentials(self);\n          break;\n        case 'before:remove:remove':\n          await getCredentials(self);\n          break;\n        case 'after:remove:remove':\n          Object.assign(\n            self.sls.service,\n            await getAppUids(self.sls.service.tenant, self.sls.service.app)\n          );\n          await removeDestination(self);\n          await saveDeployment(self, true);\n          break;\n        case 'before:invoke:local:invoke':\n          Object.assign(self.sls.service, {\n            appUid: '000000000000000000',\n            tenantUid: '000000000000000000',\n          });\n          await wrap(self);\n          break;\n        case 'after:invoke:local:invoke':\n          await wrapClean(self);\n          break;\n        case 'before:offline:start:init':\n          // await wrap(self)\n          break;\n        case 'before:step-functions-offline:start':\n          // await wrap(self)\n          break;\n        case 'login:login':\n          await login(self);\n          break;\n        case 'logout:logout':\n          await logout(self);\n          break;\n        case 'generate-event:generate-event':\n          await generate(self);\n          break;\n        case 'test:test':\n          await test(self);\n          break;\n        default:\n      }\n    };\n  }\n\n  async asyncInit() {\n    if (this.sls.enterpriseEnabled) await configureDeployProfile(this);\n  }\n}\n\nmodule.exports = ServerlessEnterprisePlugin;\n"],"file":"plugin.js"}